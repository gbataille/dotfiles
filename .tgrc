alias roachcreate='docker run -d --name=crdb --hostname=crdb -e COCKROACH_RAFT_CLOSEDTS_ASSERTIONS_ENABLED=false -p 26257:26257 -p 8080:8080 -v "${HOME}/Documents/Prog/Data/Cockroach:/cockroach/cockroach-data" cockroachdb/cockroach:latest-v22.2 start-single-node --insecure'
alias roachup='docker start crdb'
alias roachdown='docker stop crdb'

alias roachcreate_int='docker run -d --name=crdb_int --hostname=crdb -e COCKROACH_RAFT_CLOSEDTS_ASSERTIONS_ENABLED=false -p 26257:26257 -p 8080:8080 -v "${HOME}/Documents/Prog/Data/Cockroach_INT:/cockroach/cockroach-data" cockroachdb/cockroach:latest-v22.1 start-single-node --insecure'
alias roachup_int='docker start crdb_int'
alias roachdown_int='docker stop crdb_int'

# alias mssqlcreate='docker run -d --name sqlserver -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=StrongPa!!w0rd" -p 1433:1433 -v $HOME/Documents/Prog/Data/SqlServer:/var/opt/mssql  -v $HOME/Documents/Prog/Data/SqlServer/log:/var/opt/mssql/log -v $HOME/Documents/Prog/Data/SqlServer/secrets:/var/opt/mssql/secrets mcr.microsoft.com/mssql/server:2019-latest'
alias mssqlcreate='docker run -d --name sqlserver -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=MyPass@word0" -p 1433:1433 -v $HOME/Documents/Prog/Data/SqlServer:/var/opt/mssql  -v $HOME/Documents/Prog/Data/SqlServer/log:/var/opt/mssql/log -v $HOME/Documents/Prog/Data/SqlServer/secrets:/var/opt/mssql/secrets mcr.microsoft.com/mssql/server:2019-latest' alias mssqlup='docker start sqlserver'
alias mssqldown='docker stop sqlserver'

alias int_db_cockroach='cloudflared access tcp --hostname cockroach-exo-zrh-tg-db.int.t-dx.com --url 127.0.0.1:26259 --loglevel=debug'
alias int_db_sqlserver='cloudflared access tcp --hostname sqlserver-exo-zrh-tg-db.int.t-dx.com --url 127.0.0.1:21433 --loglevel=debug'
alias int_vaultd_tunnel='cloudflared access tcp --hostname tg-vaultd-exo-zrh-tg.int.t-dx.com --url 127.0.0.1:7777 --loglevel=debug'
alias int_opensearch='cloudflared access tcp --hostname int-exo-zrh-opensearch-dashboard-tunnel.int.t-dx.com --url 127.0.0.1:44444'
alias int_oc_ingress='sudo cloudflared access ssh --hostname prod-exo-zrh-osme-oc-ingress-https-01.prod.t-dx.com --url 127.0.0.1:443 & sudo chown -R gbataille ~/.cloudflared; fg'
alias int_openshift_tunnel_cli='cloudflared access ssh --hostname prod-exo-zrh-osme-oc-master-01.prod.t-dx.com --url 127.0.0.1:6443'

alias acc_db_cockroach='cloudflared access tcp --hostname cockroach-exo-zrh-tg-db.acc.t-dx.com --url 127.0.0.1:12004'
alias acc_db_sqlserver='cloudflared access tcp --hostname sqlserver-exo-zrh-tg-db.acc.t-dx.com --url 127.0.0.1:13000 --loglevel=debug'

alias prod_ada_zrh_tunnel='cloudflared access tcp --hostname ada-vshn-zrh-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23001 --loglevel=debug'
alias prod_ada_gva_tunnel='cloudflared access tcp --hostname ada-vshn-gva-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23101 --loglevel=debug'
alias prod_bch_zrh_tunnel='cloudflared access tcp --hostname bch-vshn-zrh-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23002 --loglevel=debug'
alias prod_bch_gva_tunnel='cloudflared access tcp --hostname bch-vshn-gva-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23102 --loglevel=debug'
alias prod_btc_zrh_tunnel='cloudflared access tcp --hostname btc-vshn-zrh-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23003 --loglevel=debug'
alias prod_btc_gva_tunnel='cloudflared access tcp --hostname btc-vshn-gva-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23103 --loglevel=debug'
alias prod_eth_zrh_tunnel='cloudflared access tcp --hostname eth-vshn-zrh-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23004 --loglevel=debug'
alias prod_eth_gva_tunnel='cloudflared access tcp --hostname eth-vshn-gva-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23104 --loglevel=debug'
alias prod_ltc_zrh_tunnel='cloudflared access tcp --hostname ltc-vshn-zrh-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23005 --loglevel=debug'
alias prod_ltc_gva_tunnel='cloudflared access tcp --hostname ltc-vshn-gva-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23105 --loglevel=debug'
alias prod_xlm_zrh_tunnel='cloudflared access tcp --hostname xlm-vshn-zrh-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23006 --loglevel=debug'
alias prod_xlm_gva_tunnel='cloudflared access tcp --hostname xlm-vshn-gva-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23106 --loglevel=debug'
alias prod_xrp_zrh_tunnel='cloudflared access tcp --hostname xrp-vshn-zrh-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23007 --loglevel=debug'
alias prod_xrp_gva_tunnel='cloudflared access tcp --hostname xrp-vshn-gva-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23107 --loglevel=debug'
alias prod_xtz_zrh_tunnel='cloudflared access tcp --hostname xtz-vshn-zrh-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23008 --loglevel=debug'
alias prod_xtz_gva_tunnel='cloudflared access tcp --hostname xtz-vshn-gva-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23108 --loglevel=debug'
alias prod_dot_zrh_tunnel='cloudflared access tcp --hostname dot-vshn-zrh-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23009 --loglevel=debug'
alias prod_dot_gva_tunnel='cloudflared access tcp --hostname dot-vshn-gva-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23109 --loglevel=debug'
alias prod_ftm_zrh_tunnel='cloudflared access tcp --hostname ftm-vshn-zrh-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23010 --loglevel=debug'
alias prod_ftm_gva_tunnel='cloudflared access tcp --hostname ftm-vshn-gva-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23110 --loglevel=debug'
alias prod_algo_zrh_tunnel='cloudflared access tcp --hostname algo-vshn-zrh-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23039 --loglevel=debug'
alias prod_algo_gva_tunnel='cloudflared access tcp --hostname algo-vshn-gva-tg-nodes.nodes.prod.t-dx.com --url 127.0.0.1:23139 --loglevel=debug'
alias prod_all_nodes_zrh_tunnel='prod_algo_zrh_tunnel & prod_ada_zrh_tunnel & prod_bch_zrh_tunnel & prod_btc_zrh_tunnel & prod_eth_zrh_tunnel & prod_ltc_zrh_tunnel & prod_xlm_zrh_tunnel & prod_xrp_zrh_tunnel & prod_xtz_zrh_tunnel & prod_dot_zrh_tunnel & prod_ftm_zrh_tunnel &'
alias prod_all_nodes_gva_tunnel='prod_algo_gva_tunnel & prod_ada_gva_tunnel & prod_bch_gva_tunnel & prod_btc_gva_tunnel & prod_eth_gva_tunnel & prod_ltc_gva_tunnel & prod_xlm_gva_tunnel & prod_xrp_gva_tunnel & prod_xtz_gva_tunnel & prod_dot_gva_tunnel & prod_ftm_gva_tunnel &'

alias local_gated='cd ~/Documents/Prog/Taurus/tg-gated; go run ./cmd/tg-gated start | logs_for_humans'

alias gotest='grc go test -v'
alias gotestall='grc go test ./... -v'
alias gotestacc='grc go test ./... -v -p 1 --tags acceptance'
alias gotest_int_crdb='TG_DB_HOST=localhost TG_DB_PORT=26257 TG_DB_USER=root TG_DB_PASSWORD=root TG_DB_DRIVER=cockroach grc go test -tags integration '
alias gotest_int_mssql='TG_DB_HOST=localhost TG_DB_PORT=1433 TG_DB_USER=sa TG_DB_PASSWORD=MyPass@word0 TG_DB_DRIVER=sqlserver grc go test -tags integration '
alias gobuild='grc go build --tags integration,acceptance ./...'
alias govet='grc go vet --tags integration,acceptance ./...'
alias gocilint='grc golangci-lint run --tags integration,acceptance ./...'
alias golint='govet && gocilint'
function gotestcover () {
  go test -coverprofile=coverage.out $*
  go tool cover -html=coverage.out
}

alias zt='zellij --layout taurus'

function local_hsm () {
  if [ -z "$1" ]; then
    echo "Need to pass a version number for tg-hsm docker image"
    return
  fi
  echo "Starting HSM version $1"
  docker run --rm -it -p 31500:31500 -v $HOME/Documents/Keys/HSM:/keys  tdxdockhub/tg-hsm:$1 ./tg-hsmd --server /keys
}

function local_vaultd () {
  if [ -z "$1" ]; then
    echo "Need to pass a version number for tg-vaultd docker image"
    return
  fi
  echo "Starting HSM version $1"
  cd /Users/gbataille/Documents/Prog/Taurus/tg-vaultd
  docker run --rm -p 7783:7783 -p 8083:8083 -e LD_LIBRARY_PATH=/taurus/tg-vaultd/7.2 -v $PWD/configs/dev/:/configs  tdxdockhub/tg-vaultd:$1 ./tg-vaultd start --config /configs/tg-vaultd.yml | logs_for_humans
}

[[ -f "$HOME/Documents/Prog/Taurus/taurus-scripts/git_helpers.sh" ]] && source $HOME/Documents/Prog/Taurus/taurus-scripts/git_helpers.sh

# vim: set ft=zsh:
